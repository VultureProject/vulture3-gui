{% for private_uri, apps in private_uris[public_name].items() %}<Proxy {{private_uri}}>
        {# FIXME: The first wins #}
        {% for app in apps %}{% if app.type!="balanced" and loop.first %}ProxySet {% if app.timeout %} timeout={{app.timeout}}{% endif %}{% if app.disablereuse %} disablereuse=On{% else %} disablereuse=Off{% endif %}{% if app.keepalive %} keepalive=On{% else %} keepalive=Off{% endif %}{% if app.ttl %} ttl={{app.ttl}}{% endif %}{% endif %}
        {% if app.type=="balanced" %}{{ app.balancer_config }}
        {% endif %}
        {% endfor%}

        {# Then we need to loop again on applications, as several applications may use the same backend #}
        {% for app in apps %}{% if loop.first %}<If{% else %}<ElseIf{% endif %} "%{HTTP_HOST} =~ m#^({{app.public_name}}{% if app.public_alias %}{% for alias_item in app.public_alias.split(',') %}|{% if alias_item.strip().startswith('*') %}.{% endif %}{{alias_item.strip()}}{% endfor %}{% endif %}){% if (conf.server_port|int != 80 and not app.ssl_profile) or (conf.server_port|int != 443 and app.ssl_profile) %}:{{conf.server_port}}{% endif %}$# && %{REQUEST_URI} =~ m#^{{app.public_dir}}#">
        {% if app.modsec_policy %}
        {% if app.whitelist_ips %}
        # Whitelist IPs
        SecRule REMOTE_ADDR "@ipMatch {{ app.whitelist_ips|replace(" ",",") }}" phase:1,id:1234,nolog,allow,ctl:ruleEngine=Off,ctl:auditEngine=Off
        SecRule REMOTE_ADDR "@ipMatch {{ app.whitelist_ips|replace(" ",",") }}" phase:2,id:1235,nolog,allow,ctl:ruleEngine=Off,ctl:auditEngine=Off
        SecRule REMOTE_ADDR "@ipMatch {{ app.whitelist_ips|replace(" ",",") }}" phase:3,id:1236,nolog,allow,ctl:ruleEngine=Off,ctl:auditEngine=Off
        SecRule REMOTE_ADDR "@ipMatch {{ app.whitelist_ips|replace(" ",",") }}" phase:4,id:1237,nolog,allow,ctl:ruleEngine=Off,ctl:auditEngine=Off
        ###
        {% endif %}
        Use Policy_{{ app.modsec_policy.id }}_init {{ app.security_logpath }} {{ app.security_debug_logpath }} {{ app.methods }}
        {% endif %}

        SetHandler vulture_handler

        VltApplicationID {{ app.id }}
        VltAppURL {{ app.redirect_uri }}
        VltStockAskedUri On
        VltCookiePath {{app.public_dir}}
        VltSessionTimeout {{app.auth_timeout}}

        {% if app.need_auth %}
        VltPathToPortal {% if app.auth_portal %}{{app.auth_portal}}{%else%}{{ app.redirect_uri }}{%endif%}{{ conf.server_public_token }}
        VltAuthenticationRequired On
        VltStatelessOAuth2Enable {% if app.enable_stateless_oauth2 %}On{% else %}Off{% endif %}
        VltDoubleAuthenticationRequired {% if app.otp_repository %}On{% else %}Off{% endif %}
        {% if app.auth_timeout_restart %}VltUpdateSessionTimeout on{% else %}VltUpdateSessionTimeout off{% endif %}
        {% if app.sso_enabled %}VltDisconnectURL {{ app.get_app_disconnect_url() }}{% endif %}
        VltKerberosActivated {% if app.sso_enabled and app.sso_forward == "kerberos" and not app.sso_forward_only_login %}On{% else %}Off{% endif %}
        {% else %}
        VltAuthenticationRequired Off
        {% endif %}

        {% if app.tracking %}
        VltTrackingRequired On
        VltUpdateSessionTimeout on
        {% else %}
        VltTrackingRequired Off
        {% endif %}

        {% if app.cookie_encryption %}
        VltCookieEncryption On
        VltCookieCipher {{app.cookie_cipher}}
        VltCookieCipherKey {{app.cookie_cipher_key}}
        VltCookieCipherIV {{app.cookie_cipher_iv}}
        {% endif %}

        {% if app.ssl_profile %}VltURLScheme "https://"
        {% else %}VltURLScheme "http://"{%endif%}

        {% for app_id, conf_svms in svms.items() %}
            {% if loop.first %}##### Application SVM(s) rules #####{% endif %}
            {% if app_id == app.id|string() %}
              {% for conf_svm in conf_svms %}
              Include {{conf_svm}}
              {% endfor %}
            {% endif %}
        {% endfor %}

        {% if app.modsec_policy %}#### Web Application Firewall - Profile: "{{ app.modsec_policy.name}}" #####

        {% with policy = app.modsec_policy %}
        {% include 'vulture_defender.conf' %}
        {% endwith %}

        ##### Policy Rules #####
        ### Whitelist/Blacklist rules ###
        {% if app.wl_bl_rules.conf %}
        {{Â app.wl_bl_rules.conf }}
        {% endif %}
        #################################

        ### Other rules ###
        {% for rule in app.rules_set %}# Rule {{ rule.name }}
        Use Rule_{{ rule.id }}
        {% endfor %}###################
        ##### End of Policy Rules #####

        ##### End Web Application Firewall #####
        {% endif %}

        {% if app.modsec_policy %}
        Use Policy_{{ app.modsec_policy.id }}_score
        {% endif %}
        {% if loop.first %}</If>{% else %}</ElseIf>{% endif %}

        #### Proxy SSL Settings ####
        {% if app.private_uri_is_ssl %}SSLProxyEngine On
        SSLProxyProtocol {{ app.ssl_protocol }}
        SSLProxyVerify {% if app.ssl_verify_certificate %}require
        SSLProxyCACertificatePath "/home/vlt-sys/Engine/conf/certs/"{% else %}none{% endif %}
        {% if app.ssl_verify_certificate_name %}SSLProxyCheckPeerCN On
        SSLProxyCheckPeerName On{% else %}SSLProxyCheckPeerCN Off
        SSLProxyCheckPeerName Off{% endif %}
        SSLProxyCheckPeerExpire {% if app.ssl_verify_certificate_expired %}On{% else %}Off{% endif %}
        {% if app.ssl_client_certificate %}SSLProxyMachineCertificateFile "{{ app.ssl_client_certificate }}"{% endif %}
        {% if app.ssl_cipher %}SSLProxyCipherSuite {{ app.ssl_cipher }}{% endif %}
        {% else %}SSLProxyEngine Off
        {% endif -%}
        #### End of Proxy SSL Settings ####

        ##### Specific Rules Set #####
        {% for rule_set in app.specific_rules_set %}{% if loop.first %}<If{% else %}<ElseIf{% endif %} "%{HTTP_HOST} =~ m#^({{app.public_name}}{% if app.public_alias %}{% for alias_item in app.public_alias.split(',') %}|{% if alias_item.strip().startswith('*') %}.{% endif %}{{alias_item.strip()}}{% endfor %}{% endif %}){% if (conf.server_port|int != 80 and not app.ssl_profile) or (conf.server_port|int != 443 and app.ssl_profile) %}:{{conf.server_port}}{% endif %}$# && %{REQUEST_URI} =~ m#^{{rule_set.url}}#">
            Use Rule_{{ rule_set.rs.id }}
        {% if loop.first %}</If>{% else %}</ElseIf>{% endif %}
        ##### End Specific Rules Set #####
        {% endfor %}

        {% if app.custom_proxy %}
        {{ app.custom_proxy }}
        {% endif %}

        {% endfor %}
    </Proxy>
    {% endfor %}