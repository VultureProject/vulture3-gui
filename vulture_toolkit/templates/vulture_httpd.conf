#
# This file is part of Vulture 3.
#
# Vulture 3 is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Vulture 3 is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Vulture 3.  If not, see http://www.gnu.org/licenses/.
#
#
########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################
{% set count_modsec_rules = 27 %}

ServerRoot "/home/vlt-sys/Engine"


#Core and session helpers
LoadModule authn_core_module modules/mod_authn_core.so
LoadModule authn_socache_module modules/mod_authn_socache.so
LoadModule unixd_module modules/mod_unixd.so

#Autorization helper (require valid-users / host)
{% if conf.server_module_reputation %}LoadModule access_compat_module modules/mod_access_compat.so{% endif %}
LoadModule authz_core_module modules/mod_authz_core.so
LoadModule authz_user_module modules/mod_authz_user.so
LoadModule authz_host_module modules/mod_authz_host.so

#Cache helpers
#LoadModule cache_module modules/mod_cache.so
#LoadModule cache_disk_module modules/mod_cache_disk.so
#LoadModule cache_socache_module modules/mod_cache_socache.so
#LoadModule slotmem_shm_module modules/mod_slotmem_shm.so
LoadModule socache_shmcb_module modules/mod_socache_shmcb.so

#Bandwith, timeout and performance helpers
{% if conf.server_module_ratelimit %}LoadModule ratelimit_module modules/mod_ratelimit.so{% endif %}
{% if conf.server_module_reqtimeout %}LoadModule reqtimeout_module modules/mod_reqtimeout.so{% endif %}

#SSL Module
LoadModule ssl_module modules/mod_ssl.so

{% if conf.server_ssl_profile  %}Listen {{conf.server_address}}:{{conf.server_port}} https
{% else %}Listen {{conf.server_address}}:{{conf.server_port}} http{% endif %}

#Core helpers
LoadModule macro_module modules/mod_macro.so
LoadModule status_module modules/mod_status.so
LoadModule mime_module modules/mod_mime.so
LoadModule log_config_module modules/mod_log_config.so
LoadModule logio_module modules/mod_logio.so
LoadModule env_module modules/mod_env.so
LoadModule setenvif_module modules/mod_setenvif.so
LoadModule version_module modules/mod_version.so
LoadModule dir_module modules/mod_dir.so
LoadModule alias_module modules/mod_alias.so

#Rewrite helpers
#https://blogs.oracle.com/basant/entry/using_mod_sed_to_filter
LoadModule filter_module modules/mod_filter.so
LoadModule substitute_module modules/mod_substitute.so
LoadModule rewrite_module modules/mod_rewrite.so

LoadModule headers_module modules/mod_headers.so
LoadModule vulture_module modules/mod_vulture.so

#Deflate helper
LoadModule deflate_module modules/mod_deflate.so

#Proxy / Reverse Proxy helpers
LoadModule proxy_module modules/mod_proxy.so

#WebSocket proxy
LoadModule proxy_wstunnel_module modules/mod_proxy_wstunnel.so

LoadModule proxy_connect_module modules/mod_proxy_connect.so

LoadModule remoteip_module modules/mod_remoteip.so

## Trusted Remote Proxy
{% for remote_ip_internal_proxy in conf.remote_ip_internal_proxy %}
RemoteIPInternalProxy {{ remote_ip_internal_proxy }}{% endfor %}
#######################

RemoteIPHeader X-Forwarded-For

{% if conf.server_module_geoip_city or conf.server_module_geoip or conf.server_module_reputation %}
LoadModule maxminddb_module modules/mod_maxminddb.so
MaxMindDBEnable On
{% endif %}
{% if conf.server_module_geoip_city %}
MaxMindDBFile CITY_DB    /var/db/loganalyzer/GeoLite2-City.mmdb
MaxMindDBEnv COUNTRY_CODE CITY_DB/country/iso_code
MaxMindDBEnv CITY CITY_DB/city/names/en
MaxMindDBEnv LONGITUDE CITY_DB/location/longitude
MaxMindDBEnv LATITUDE CITY_DB/location/latitude
{% endif %}
{% if conf.server_module_geoip %}
MaxMindDBFile COUNTRY_DB /var/db/loganalyzer/GeoLite2-Country.mmdb
MaxMindDBEnv COUNTRY_CODE COUNTRY_DB/country/iso_code
{% endif %}
{% if conf.server_module_reputation %}
MaxMindDBFile REPUTATION_DB /var/db/loganalyzer/ip-reputation.mmdb
MaxMindDBEnv REPUTATION0 REPUTATION_DB/reputation/0
MaxMindDBEnv REPUTATION1 REPUTATION_DB/reputation/1
MaxMindDBEnv REPUTATION2 REPUTATION_DB/reputation/2
MaxMindDBEnv REPUTATION3 REPUTATION_DB/reputation/3
MaxMindDBEnv REPUTATION4 REPUTATION_DB/reputation/4
{% endif %}

{# Proxy modules
#LoadModule xml2enc_module modules/mod_xml2enc.so
#LoadModule proxy_html_module modules/mod_proxy_html.so #}

{% if conf.server_module_proxy_ftp %}LoadModule proxy_ftp_module modules/mod_proxy_ftp.so{% endif %}
{% if conf.server_module_proxy_http %}LoadModule proxy_http_module modules/mod_proxy_http.so{% endif %}
{% if conf.server_module_proxy_fcgi %}LoadModule proxy_fcgi_module modules/mod_proxy_fcgi.so{% endif %}
{% if conf.server_module_proxy_scgi %}LoadModule proxy_scgi_module modules/mod_proxy_scgi.so{% endif %}
{% if conf.server_module_proxy_ajp %}LoadModule proxy_ajp_module modules/mod_proxy_ajp.so{% endif %}
{% if conf.server_module_proxybalancer %}#Balancer helpers
LoadModule slotmem_shm_module modules/mod_slotmem_shm.so
LoadModule proxy_balancer_module modules/mod_proxy_balancer.so
LoadModule lbmethod_byrequests_module modules/mod_lbmethod_byrequests.so
LoadModule watchdog_module modules/mod_watchdog.so
LoadModule proxy_hcheck_module modules/mod_proxy_hcheck.so
{% if conf.server_module_lbmethod_bytraffic %}LoadModule lbmethod_bytraffic_module modules/mod_lbmethod_bytraffic.so{% endif %}
{% if conf.server_module_lbmethod_bybusyness %}LoadModule lbmethod_bybusyness_module modules/mod_lbmethod_bybusyness.so{% endif %}
{% if conf.server_module_lbmethod_heartbeat %}LoadModule lbmethod_heartbeat_module modules/mod_lbmethod_heartbeat.so{% endif %}
{% endif %}
{% if conf.server_module_h2 %}LoadModule http2_module modules/mod_http2.so{% endif %}
{% if conf.server_module_rpc %}LoadModule proxy_msrpc_module modules/mod_proxy_msrpc.so{% endif %}

{% if conf.server_module_security %}# Security helper
LoadFile /usr/local/lib/liblua-5.1.so
LoadFile /usr/local/lib/libxml2.so
LoadFile /usr/local/lib/vulture/libyajl.so

LoadModule unique_id_module modules/mod_unique_id.so
LoadModule security2_module modules/mod_security2.so
SecDataDir /var/log/Vulture/worker/
{% endif %}

{% if conf.server_module_defender %}# Mod Defender conf
LoadModule defender_module modules/mod_defender.so
Include conf/defender/core.rules
{% endif %}

{% if conf.server_module_svm2 or conf.server_module_svm3 or conf.server_module_svm4 or conf.server_module_svm5 %}# SVM module(s)
{% if conf.server_module_svm2 %}LoadModule svm2_module modules/mod_svm2.so {% endif %}
{% if conf.server_module_svm3 %}LoadModule svm3_module modules/mod_svm3.so {% endif %}
{% if conf.server_module_svm4 %}LoadModule svm4_module modules/mod_svm4.so {% endif %}
{% if conf.server_module_svm5 %}LoadModule svm5_module modules/mod_svm5.so {% endif %}
{% endif %}


##### Global config #####
RewriteEngine On
{% if conf.server_ssl_profile %}SSLCryptoDevice {{conf.server_ssl_profile.engine}}{% endif %}
{# FIXME #}
User daemon
Group daemon

{# FIXME #}
ServerAdmin daemon@localhost
<Files ".ht*">
    Require all denied
</Files>
TypesConfig conf/mime.types
EnableMMAP On
EnableSendFile On
AcceptFilter http httpready
AcceptFilter https dataready
Mutex sem
PidFile {{ conf.pid_file }}
ScoreBoardFile {{ conf.scoreboard_file }}
SSLSessionCache "{{ conf.sslsessioncache_file }}"
SSLStaplingCache "{{ conf.sslstaplingcache_file }}"

##### End of global config #####

##### Security concerns #####
ServerName localhost
ServerTokens Prod
ServerSignature Off
UseCanonicalName Off
AccessFilename .ht_secure_access
HostnameLookups Off
TraceEnable off
##### End of Security concerns #####

{% if conf.server_worker %}####  Worker configuration based on Profile "{{ conf.server_worker.name }}" #####
GracefulShutdownTimeout {{ conf.server_worker.gracefulshutdowntimeout }}
MaxConnectionsPerChild {{ conf.server_worker.maxconnectionsperchild }}
MinSpareThreads {{ conf.server_worker.minsparethreads }}
MaxSpareThreads {{ conf.server_worker.maxsparethreads }}
ServerLimit {{ conf.server_worker.serverlimit }}
ThreadsPerChild {{ conf.server_worker.threadsperchild }}
MaxRequestWorkers {{ conf.server_worker.maxrequestworkers }}
{% if conf.server_module_h2 and conf.server_worker.h2_config %}{{ conf.server_worker.h2_config }}
{% endif %}{% if conf.server_worker.timeout %}Timeout {{conf.server_worker.timeout}}{%endif%}
{% if conf.server_worker.keepalive %}KeepAlive On
{% if conf.server_worker.maxkeepaliverequests %}MaxKeepAliveRequests {{conf.server_worker.maxkeepaliverequests}}
{%endif%}{% if conf.server_worker.keepalivetimeout %}KeepAliveTimeout {{conf.server_worker.keepalivetimeout}}
{%endif%}{% else %}KeepAlive Off
{% endif %}{% if conf.server_worker.req_timeout %}RequestReadTimeout {{conf.server_worker.req_timeout}}{%endif%}
{% if conf.server_worker.rate_limit %}SetOutputFilter RATE_LIMIT
SetEnv rate-limit {{ conf.server_worker.rate_limit }}{% endif %}
##### End of worker configuration #####
{% endif %}

#### LogFormat configuration ####
LogFormat "%a %l %u %t \"%r\" %>s %b \"%{Referer}i\" \"%{User-agent}i\"" portal
{% for format in conf.server_log_format %}LogFormat "{{format.get_format()|safe}}" LogFormat_{{format.id}}
{% endfor %}#### End of LogFormat configuration ####

### mod_vulture stuff ###
VltRedisIP "127.0.0.1"
VltRedisPort 6379
VltCookieName {{ conf.server_app_cookie }}
VltPortalCookieName {{ conf.server_portal_cookie }}
VltPublicTokenName {{ conf.server_public_token }}
VltOAuth2TokenName {{ conf.server_oauth2_token }}
### End of mod_vulture stuff ###

#### Local IPs declaration ####
{% for ip in conf.vulture_status_ip_allowed %}{% if ip != ""%}
SetEnvIf Remote_Addr "{{ ip }}" supervision{% endif %}{% endfor %}
SetEnvIf Remote_Addr "127.0.0.1" local
SetEnvIf Remote_Addr "::1" local
{% for ip in conf.local_ips %}SetEnvIf Remote_Addr "{{ip}}" local
{% endfor %}#### End of Local IPs declaration ####

#### Proxy SSL Settings ####
SSLProxyEngine {{ conf.server_ssl_proxyengine }}
#### End of Proxy SSL Settings ####

#### MACRO ModSec Policy ####
{% for policy in conf.modsec_policy %}<Macro Policy_{{ policy.id }}_init $logpath $debug_logpath $methods>
    ## ModSec Policy "{{ policy.name }}" ##

    SecAuditEngine {{ policy.secauditengine }}
    SecRuleEngine On

    SecAuditLog $logpath
    {# SecAuditLogType Concurrent
    #FIXME #}
    SecAuditLogType Serial
    SecAuditLogStorageDir /var/log/Vulture/worker/

    SecDebugLog $debug_logpath
    SecDebugLogLevel 0
    SecInterceptOnError Off
    SecRequestBodyAccess {% if policy.secbodyinspection %} On {% else %} Off {% endif %}
    SecRequestBodyNoFilesLimit {{policy.defender_request_body_limit}}
    SecRequestBodyLimit {{policy.max_file_size}}
    SecDefaultAction "phase:2,pass,{{policy.logging_control}}"

    {# Scoring settings #}
    SecAction "id:'1', phase:2, t:none, setvar:tx.critical_anomaly_score={{policy.critical_anomaly_score}}, \
        setvar:tx.error_anomaly_score={{policy.error_anomaly_score}}, \
        setvar:tx.warning_anomaly_score={{policy.warning_anomaly_score}}, \
        setvar:tx.notice_anomaly_score={{policy.notice_anomaly_score}}, \
        setvar:tx.session_hijacking_anomaly_score={{policy.session_hijacking_anomaly_score}}, \
        setvar:tx.csrf_hijacking_anomaly_score={{policy.csrf_hijacking_anomaly_score}}, \
        setvar:tx.ua_unknown_anomaly_score={{policy.ua_unknown_anomaly_score}}, \
        setvar:tx.ua_anonymous_anomaly_score={{policy.ua_anonymous_anomaly_score}}, \
        setvar:tx.ua_bot_anomaly_score={{policy.ua_bot_anomaly_score}}, \
        setvar:tx.ua_browser_anomaly_score={{policy.ua_browser_anomaly_score}}, \
        setvar:tx.ua_cloud_anomaly_score={{policy.ua_cloud_anomaly_score}}, \
        setvar:tx.ua_console_anomaly_score={{policy.ua_console_anomaly_score}}, \
        setvar:tx.ua_crawler_anomaly_score={{policy.ua_crawler_anomaly_score}}, \
        setvar:tx.ua_emailclient_anomaly_score={{policy.ua_emailclient_anomaly_score}}, \
        setvar:tx.ua_emailharvester_anomaly_score={{policy.ua_emailharvester_anomaly_score}}, \
        setvar:tx.ua_mobile_anomaly_score={{policy.ua_mobile_anomaly_score}}, \
        setvar:tx.ua_script_anomaly_score={{policy.ua_script_anomaly_score}}, \
        nolog, pass"
    SecAction "id:'2', phase:2, t:none, setvar:tx.anomaly_score=0, setvar:tx.inbound_anomaly_score=0, setvar:tx.outbound_anomaly_score=0, nolog, pass"
    SecAction "id:'3', phase:2, t:none, setvar:tx.inbound_anomaly_score_threshold={{policy.inbound_anomaly_score_threshold}}, setvar:tx.outbound_anomaly_score_threshold={{policy.outbound_anomaly_score_threshold}}, nolog, pass"
    SecAction "id:'4', phase:2, t:none, setvar:tx.anomaly_score_blocking=on, nolog, pass"
    #HTTP Policy Settings
    SecAction "id:'6', phase:2, t:none, setvar:tx.max_num_args={{policy.max_num_args}}, nolog, pass"
    SecAction "id:'7', phase:2, t:none, setvar:tx.arg_name_length={{policy.arg_name_length}}, nolog, pass"
    SecAction "id:'8', phase:2, t:none, setvar:tx.arg_length={{policy.arg_length}}, nolog, pass"
    SecAction "id:'9', phase:2, t:none, setvar:tx.total_arg_length={{policy.total_arg_length}}, nolog, pass"
    SecAction "id:'10', phase:2, t:none, setvar:tx.max_file_size={{policy.max_file_size}}, nolog, pass"
    SecAction "id:'11', phase:2, t:none, setvar:tx.combined_file_sizes={{policy.combined_file_sizes}}, nolog, pass"
    SecAction "id:'12', phase:2, t:none, \
      setvar:'tx.allowed_request_content_type={{policy.get_attr('allowed_request_content_type','|')}}', \
      setvar:'tx.allowed_http_versions={{policy.get_attr('allowed_http_versions',' ')}}', \
      setvar:'tx.allowed_methods=$methods', \
      setvar:'tx.restricted_extensions={{policy.get_attr('restricted_extensions',' ')}}', \
      setvar:'tx.restricted_headers={{policy.get_attr('restricted_headers',' ')}}', \
      nolog, pass"

    # IP Collections
    SecRule REQUEST_HEADERS:User-Agent "^(.*)$" \
      "id:'16', \
      phase:2, \
      t:none,t:sha1,t:hexEncode, \
      setvar:tx.ua_hash=%{matched_var}, \
      nolog, \
      pass"

    SecRule REQUEST_HEADERS:x-forwarded-for "^\b(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\b" \
      "id:'17', \
      phase:2, \
      t:none, \
      capture, \
      setvar:tx.real_ip=%{tx.1}, \
      nolog, \
      pass"

    {# HOW DOES MODSecurity WORKS:
       - Collection name :> This is originally used to name the DBM file:> "Collection.dat"
       - One or more KEY :> This is where (var, name) values will be stored
    In the following example, we initialize the collection "ip" and the KEY is based on User's IP and UA
    So, if a request comes from 1.2.3.4 with firefox and if we store a value in ip.test, with "setvar:ip.test=hello", this will result in the following structure:
       * ip.dat
           * 1.2.3.4_firefox
               * test = hello   //modSecurity will also add special keys, such as expired, ...
    If we store a value in global.test, with "setvar:global.test=hello", this will result in the following structure:
       * global.dat
           * global
               * test = hello  //modSecurity will also add special keys, such as expired, ...

    HOW DOES Vulture+Redis WORKS:
    KEYS ARE STORE IN REDIS IN THE FORM "SET ip--1.2.3.4_firefox--test hello EX 3600"
    This allow lo let redis expires KEY, and is totally transparent for legacy modSecurity rules
    This is also faster than ever :-)
    We can't use HASHMAP with Redis as there is no expire setting for that #}

    # Init collections global and ip
    SecRule &TX:REAL_IP "!@eq 0" \
        "id:'18', \
        phase:2, \
        t:none, \
        initcol:global=global, \
        initcol:ip=%{tx.real_ip}_%{tx.ua_hash}, \
        nolog, \
        pass"
    SecRule &TX:REAL_IP "@eq 0" \
        "id:'19', \
        phase:2, \
        t:none, \
        initcol:global=global, \
        initcol:ip=%{remote_addr}_%{tx.ua_hash}, \
        setvar:tx.real_ip=%{remote_addr}, \
        nolog, \
        pass"

    {% if policy.dos_enable_rule %}
    SecAction "id:'235', phase:2, t:none, setvar:'tx.dos_protected_urls=/', setvar:'tx.dos_burst_time_slice={{policy.dos_burst_time_slice}}', setvar:'tx.dos_counter_threshold={{policy.dos_counter_threshold}}', setvar:'tx.dos_block_timeout={{policy.dos_block_timeout}}', auditlog, pass"
    {% for dos_rule in policy.dos_rules %}
        {% if dos_rule.enable -%}
        SecRule REQUEST_FILENAME "@within {{dos_rule.url}}" "phase:2,id:'{{count_modsec_rules}}',t:none,nolog,pass,setvar:'tx.dos_protected_urls={{dos_rule.url}}', setvar:'tx.dos_burst_time_slice={{dos_rule.burst_time_slice}}', setvar:'tx.dos_counter_threshold={{dos_rule.counter_threshold}}', setvar:'tx.dos_block_timeout={{dos_rule.block_timeout}}', auditlog, pass"
        {% set count_modsec_rules = count_modsec_rules + 1 %}
        {% endif %}
    {% endfor %}
    # Block request if needed
    SecRule IP:DOS_BLOCK "@eq 1" "phase:2, id:'236', chain, deny, status:403, log, tag:'attack-dos', \
            msg:'Denial of Service (DoS) attack identified from %{tx.real_ip} (%{tx.dos_block_counter} hits since last alert)', \
            setvar:ip.dos_counter=0, setvar:tx.dos_block_counter=%{ip.dos_block_counter}, setvar:ip.dos_block_counter=+1, expirevar:ip.dos_block_counter=%{tx.dos_burst_time_slice}"
    SecRule &IP:DOS_BLOCK_FLAG "@eq 0" "setvar:ip.dos_block_flag=1, expirevar:ip.dos_block_flag=%{tx.dos_block_timeout}"
    SecAction "phase:5,id:233,expirevar:ip.dos_block_flag=%{tx.dos_block_timeout}, expirevar:ip.dos_block=%{tx.dos_block_timeout}"
    # Block and track # of requests but don't log
    SecRule IP:DOS_BLOCK "@eq 1" "phase:2, id:'237', t:none, tag:'attack-dos', deny, status:403, log, tag:'attack-dos', \
            msg:'Denial of Service (DoS) attack identified from %{tx.real_ip} (%{tx.dos_block_counter} hits since last alert)', \
            setvar:ip.dos_block_counter=+1, expirevar:ip.dos_block_counter=%{tx.dos_burst_time_slice}"
    # Skip if we have blocked the request
    SecRule IP:DOS_BLOCK "@eq 1" "phase:5, id:'238', t:none, nolog, tag:'attack-dos', pass, skipAfter:END_DOS_PROTECTION_CHECKS"
    # DOS Counter: Count the number of requests
    SecAction "phase:5, id:'239', t:none, t:lowercase, nolog, pass, tag:'attack-dos', setvar:ip.dos_counter=+1, \
               expirevar:ip.dos_counter=%{tx.dos_burst_time_slice}"
    # Check DOS Counter
    # If the request count is greater than or equal to user settings,
    # we raise the burst counter. This happens via two separate rules:
    # - 240: raise from 0 to 1
    # - 241: raise from 1 to 2
    #
    # This approach with two rules avoids raising the burst counter
    # from 0 to 2 via two concurrent requests. We do not raise the
    # burst counter beyond 2.
    #
    SecRule IP:DOS_COUNTER "@ge %{tx.dos_counter_threshold}" "phase:5, id:'240', t:none, nolog, pass, tag:'attack-dos', chain"
    SecRule &IP:DOS_BURST_COUNTER "@eq 0" "setvar:ip.dos_burst_counter=1, expirevar:ip.dos_burst_counter=%{tx.dos_burst_time_slice},\
            setvar:ip.dos_counter=0"
    SecRule IP:DOS_COUNTER "@ge %{tx.dos_counter_threshold}" "phase:5, id:'241', t:none, nolog, pass, tag:'attack-dos', chain"
    SecRule &IP:DOS_BURST_COUNTER "@ge 1" "setvar:ip.dos_burst_counter=2, expirevar:ip.dos_burst_counter=%{tx.dos_burst_time_slice}, \
            setvar:ip.dos_counter=0"
    # Check DOS Burst Counter and set Block
    # Check the burst counter - if greater than or equal to 2, then we set the IP
    # block variable for a given expiry and issue an alert.
    #
    SecRule IP:DOS_BURST_COUNTER "@ge 2" "phase:5, id:'242', t:none, log, pass, tag:'attack-dos', \
            msg:'Potential Denial of Service (DoS) Attack from %{tx.real_ip} - # of Request Bursts: %{ip.dos_burst_counter}',\
            setvar:ip.dos_block=1, expirevar:ip.dos_block=%{tx.dos_block_timeout}, setvar:ip.dos_burst_counter=0"
    SecMarker END_DOS_PROTECTION_CHECKS
    {% endif %}

    #UTF8
    {% if policy.crs_validate_utf8_encoding %}   SecAction "id:'14', phase:2, t:none, setvar:tx.crs_validate_utf8_encoding=1, nolog, pass"{%endif%}

    #XML
    {% if policy.xml_enable %}
        SecRule REQUEST_HEADERS:Content-Type "text/xml" "id:'15', phase:2, t:none,t:lowercase, nolog, pass, chain"
        SecRule REQBODY_PROCESSOR "!@streq XML" "ctl:requestBodyProcessor=XML"
    {% endif %}

    # Policy custom conf
    {{ policy.customconf }}

    {% if policy.secauditlogrelevantstatus %}SecAuditLogRelevantStatus "{{ policy.secauditlogrelevantstatus }}"{% endif %}
    SecConnEngine {{ policy.secconnengine}}
    {% if policy.seccontentinjection %}SecContentInjection On
    SecStreamOutBodyInspection On{% else %}SecContentInjection Off
    SecStreamOutBodyInspection Off{% endif %}
    {% if policy.secdisablebackendcompression %}SecDisableBackendCompression On{% else %}SecDisableBackendCompression Off{% endif %}
    SecArgumentSeparator {{ policy.secargumentseparator}}
    SecCollectionTimeout {{ policy.seccollectiontimeout}}
    SecCookieFormat {{ policy.seccookieformat}}
    SecCookieV0Separator {{ policy.seccookiev0separator}}
</Macro>
{% endfor %}

{% for policy in conf.modsec_policy %}<Macro Policy_{{ policy.id }}_score>
    SecAction "id:'20',t:none,pass,nolog,setvar:tx.inbound_anomaly_score=+%{env.defender_$sql} \
        setvar:tx.inbound_anomaly_score=+%{env.defender_$rfi} \
        setvar:tx.inbound_anomaly_score=+%{env.defender_$traversal} \
        setvar:tx.inbound_anomaly_score=+%{env.defender_$evade} \
        setvar:tx.inbound_anomaly_score=+%{env.defender_$libinjection_sql} \
        setvar:tx.inbound_anomaly_score=+%{env.defender_$libinjection_xss} \
        setvar:tx.inbound_anomaly_score=+%{env.defender_$upload} \
        setvar:tx.inbound_anomaly_score=+%{env.defender_$xss}"

    SecRule ENV:SVM2 "@eq 1" "id:'21',t:none,pass,nolog,setvar:tx.inbound_anomaly_score=+%{tx.warning_anomaly_score},msg:'SVM 2 triggered'"
    SecRule ENV:SVM3 "@eq 1" "id:'22',t:none,pass,nolog,setvar:tx.inbound_anomaly_score=+%{tx.notice_anomaly_score},msg:'SVM 3 triggered'"
    SecRule ENV:SVM6 "@eq 1" "id:'23',t:none,pass,nolog,setvar:tx.inbound_anomaly_score=+%{tx.critical_anomaly_score},msg:'SVM 6 triggered'"
    SecRule ENV:SVM7 "@eq 1" "id:'24',t:none,pass,nolog,setvar:tx.inbound_anomaly_score=+%{tx.error_anomaly_score},msg:'SVM 7 triggered'"
    
    SecAction "id:'90',t:none,pass,nolog,setvar:tx.inbound_anomaly_score=+%{tx.anomaly_score}"
    SecAction "id:'25',t:none,pass,nolog,setenv:score=%{tx.inbound_anomaly_score}"
    SecAction "id:'26',t:none,pass,nolog,setenv:threshold=%{tx.inbound_anomaly_score_threshold}"

    {% if policy.reqbody_error_enable %}
    SecRule REQBODY_ERROR "@eq 1" \
        "id:'95',phase:2,t:none,log,deny,status:400,msg:'Failed to parse request body.',logdata:'%{reqbody_error_msg}',severity:2"
    {% endif %}

    SecRule TX:INBOUND_ANOMALY_SCORE "@ge %{tx.inbound_anomaly_score_threshold}" "id:'91',t:none,deny,log,msg:'Inbound anomaly score %{tx.inbound_anomaly_score} exceeded threshold %{tx.inbound_anomaly_score_threshold}'"
    SecRule TX:OUTBOUND_ANOMALY_SCORE "@ge %{tx.outbound_anomaly_score_threshold}" "id:'92',t:none,deny,log,msg:'Outbound anomaly score %{tx.outbound_anomaly_score} exceeded threshold %{tx.outbound_anomaly_score_threshold}'"
    SecAction "id:'93',t:none,pass,nolog,setenv:inbound_anomaly_score=%{tx.inbound_anomaly_score}"

    # Disable Very strict character set check
    SecRuleRemoveById 920273

    # Disable Overall Transaction Anomaly Score check
    SecRuleRemoveById 949110
</Macro>
{% endfor %}
#############################



#### MACRO RULES SET ####{% for rule in conf.rules_set %}
<Macro Rule_{{ rule.id }}>
## Rules Set "{{ rule.name }}" ##
{{ rule.conf }}</Macro>
{% endfor %}
#########################

## MACRO Portal Rewrite ##
<Macro PortalRewrite>
    #### All the portal URIs ####
    RewriteRule "{{ conf.server_public_token }}/self/templates/(.*)$" "http://127.0.0.1:9000/templates/$1" [P,L]
    RewriteRule "{{ conf.server_public_token }}/templates/(.*)$" "http://127.0.0.1:9000/templates/$1" [P,L]
    RewriteRule "{{ conf.server_public_token }}/portal/portal_statics/(.*)$" "http://127.0.0.1:9000/portal/portal_statics/$1" [P,L]
    RewriteRule "{{ conf.server_public_token }}/portal/learning$" "http://127.0.0.1:9000/portal/learning" [P,L]
    RewriteRule "{{ conf.server_public_token }}/portal/2fa/otp$" "http://127.0.0.1:9000/portal/2fa/otp" [P,L]
    RewriteRule "{{ conf.server_public_token }}/portal/oauth2/login$" "http://127.0.0.1:9000/portal/_oauth2/_login" [P,L]
    RewriteRule "{{ conf.server_public_token }}/portal/oauth2/token$" "http://127.0.0.1:9000/portal/_oauth2/_token" [P,L]
    RewriteRule "d_{{ conf.server_public_token }}/(.*)$" "http://127.0.0.1:9000/portal/disconnect/$1" [P,L]
</Macro>
##########################


<Macro LogFormat_{{conf.server_address}}-{{conf.server_port}} $buffered_logs>
    BufferedLogs $buffered_logs
    ErrorLog "/var/log/Vulture/worker/vulture-intf-{{conf.server_address}}-{{conf.server_port}}-error.log"
    CustomLog /var/log/Vulture/worker/portal.log portal env=portal
    CustomLog /var/log/Vulture/worker/vulture-intf-{{conf.server_address}}-{{conf.server_port}}-access.log portal
    LogLevel error
</Macro>


{% for public_name, apps in apps.items() %}
##### Configuration for public FQDN "{{public_name}}" #####
<VirtualHost {{conf.server_address}}:{{conf.server_port}}>
    DocumentRoot "/home/vlt-sys/Engine"
    ServerName {{public_name}}

    #### PROXY Protocol
    {% if apps.0.public_dir not in ["vulture-status", "vulture-balancer-status"] -%}
    RemoteIPProxyProtocol {% if apps.enable_proxy_protocol %}On{% else %}Off{% endif %}
    {% elif apps.1.public_dir not in ["vulture-status", "vulture-balancer-status"] -%}
    RemoteIPProxyProtocol {% if apps.1.enable_proxy_protocol %}On{% else %}Off{% endif %}
    {% elif apps.2.public_dir not in ["vulture-status", "vulture-balancer-status"] -%}
    RemoteIPProxyProtocol {% if apps.2.enable_proxy_protocol %}On{% else %}Off{% endif %}
    {% endif %}
    ####

    #### VHOST Log Format ####
    Use LogFormat_{{conf.server_address}}-{{conf.server_port}} {% if conf.server_log_buffered %} On{% else %} Off{% endif%}
    #### End of VHOST Log Format ####

    Use PortalRewrite

    #### Application proxy rules ####
    {% for app in apps %}
    {% if app.public_dir not in ["vulture-status", "vulture-balancer-status"] %}
        # Requests to portal for app "{{app.name}}"
        RewriteCond %{HTTP_HOST} ^({{app.public_name}}{% if app.public_alias %}{% for alias_item in app.public_alias.split(',') %}|{% if alias_item.strip().startswith('*') %}.{% endif %}{{alias_item.strip()}}{% endfor %}{% endif %}){% if (conf.server_port|int != 80 and not app.ssl_profile) or (conf.server_port|int != 443 and app.ssl_profile) %}:{{conf.server_port}}{% endif %}$
        RewriteRule "^{{app.public_dir}}{{ conf.server_public_token }}/(.*)$" "http://127.0.0.1:9000/portal/{{ conf.server_public_token }}/$1/{{app.id}}" [P,L]
    {% endif %}
    {% endfor %}

    RewriteCond %{HTTP_HOST} ^({{public_name}})$
    RewriteRule ^/.well-known/acme-challenge/(.*) /conf/.well-known/acme-challenge/$1 [PT,L]
    RewriteCond %{HTTP_HOST} ^({{public_name}})$
    RewriteRule ^/vulture-status$ /vulture-status [PT,L]
    {% if conf.server_module_proxybalancer -%}
    RewriteCond %{HTTP_HOST} ^({{public_name}})$
    RewriteRule ^/vulture-balancer-status$ /vulture-balancer-status [PT,L]{% endif %}

    {% if conf.server_global_rewriting %}##### Global URL rewriting rules #####
    {% for rule in conf.server_global_rewriting %}{{rule}}
    {% endfor %}##### End of global URL rewriting rules #####{% endif %}

    #### Websocket support ####
    {% for app in apps %}
    {% if app.public_dir not in ["vulture-status", "vulture-balancer-status"] %}
    {% if app.enable_ws %}
    RewriteCond %{HTTP:Upgrade} =websocket [NC]
    RewriteCond %{HTTP_HOST} ^({{app.public_name}}{% if app.public_alias %}{% for alias_item in app.public_alias.split(',') %}|{% if alias_item.strip().startswith('*') %}.{% endif %}{{alias_item.strip()}}{% endfor %}{% endif %}){% if (conf.server_port|int != 80 and not app.ssl_profile) or (conf.server_port|int != 443 and app.ssl_profile) %}:{{conf.server_port}}{% endif %}$
    RewriteCond %{REQUEST_URI} ^{{app.public_dir}}
    RewriteRule {{app.public_dir}}(.*) ws{% if app.private_uri_is_ssl %}s{% endif %}://{{app.private_uri_fqdn}}/$1 [P,E=app_{{ app.id }}:1,E=app_name:{{ app.name }},L]
    {% endif %}

    {% if app.force_tls and app.has_tls %}#### Force TLS REDIRECTION ####
    RewriteCond %{HTTP_HOST} ^({{app.public_name}}{% if app.public_alias %}{% for alias_item in app.public_alias.split(',') %}|{% if alias_item.strip().startswith('*') %}.{% endif %}{{alias_item.strip()}}{% endfor %}{% endif %}){% if (conf.server_port|int != 80 and not app.ssl_profile) or (conf.server_port|int != 443 and app.ssl_profile) %}:{{conf.server_port}}{% endif %}$
    RewriteCond %{HTTPS} !=on
    RewriteRule ^{{app.public_dir}}(.*)$ {{app.redirect_uri}}$1 [R=302,L]{%endif%}
    {% endif %}
    {% endfor %}

    {% for app in apps %}
    {% if app.public_dir not in ["vulture-status", "vulture-balancer-status"] %}
    # Proxified requests for app "{{app.name}}"
    RewriteCond %{HTTP_HOST} ^({{app.public_name}}{% if app.public_alias %}{% for alias_item in app.public_alias.split(',') %}|{% if alias_item.strip().startswith('*') %}.{% endif %}{{alias_item.strip()}}{% endfor %}{% endif %}){% if (conf.server_port|int != 80 and not app.ssl_profile) or (conf.server_port|int != 443 and app.ssl_profile) %}:{{conf.server_port}}{% endif %}$
    {% if app.type=="balanced" %}RewriteRule "^{{app.public_dir}}(.*)$" "balancer://{{app.id}}/$1" [P,E=app_{{ app.id }}:1,E=app_name:{{ app.name }},L]
    {% else %}RewriteRule "^{{app.public_dir}}(.*)$" "{{app.private_uri}}$1" [P,E=app_{{ app.id }}:1,E=app_name:{{ app.name }},L]
    {% endif %}
    {% if app.custom_vhost %}
    {{ app.custom_vhost }}
    {% endif %}
    {% endif %}
    {% endfor %}

    RewriteRule ^(.*)$ - [F]

    #Portal Proxy
    <Proxy http://127.0.0.1:9000/portal>
        RewriteCond %{REQUEST_METHOD} !^(GET|POST)$
        RewriteRule .* - [R=405,L]
        #Needed to break the pseudo Django CSRF Protection
        RequestHeader set Referer "http://127.0.0.1:9000/portal"
        RequestHeader set X-Forwarded-For "%{REMOTE_ADDR}s"

        # Retrieve authentication statuses from headers stock them in notes
        Header note X-Authentication X-Authentication
        Header note X-Authentication-Result X-Authentication-Result
        # And remove them to prevent sending to user
        Header unset X-Authentication
        Header unset X-Authentication-Result

        SetEnv portal 1
        {% set first = True %}
        {% for app in apps %}
        {% if app.public_dir not in ["vulture-status", "vulture-balancer-status"] %}
        ## Custom headers for app "{{app.name}}"
        {% if first %}<If {% else %}<ElseIf {% endif %}"%{HTTP_HOST} =~ m#^({{app.public_name}}{% if app.public_alias %}{% for alias_item in app.public_alias.split(',') %}|{% if alias_item.strip().startswith('*') %}.{% endif %}{{alias_item.strip()}}{% endfor %}{% endif %}){% if (conf.server_port|int != 80 and not app.ssl_profile) or (conf.server_port|int != 443 and app.ssl_profile) %}:{{conf.server_port}}{% endif %}$# && %{REQUEST_URI} =~ m#^{{app.public_dir}}#">
        SetHandler vulture_handler

        SetEnv app_{{app.id}} 1
        SetEnv app_name {{app.name}}
        VltApplicationID {{ app.id }}
        VltAppURL {{ app.redirect_uri }}
        VltStockAskedUri On
        VltCookiePath {{app.public_dir}}
        VltSessionTimeout {{app.auth_timeout}}



        {% if app.forward_x509_fields %}
        RequestHeader set SSL_CLIENT_S_DN ""
        RequestHeader set SSL_CLIENT_I_DN ""
        RequestHeader set SSL_SERVER_S_DN_OU ""
        RequestHeader set SSL_CLIENT_VERIFY ""
        RequestHeader set SSL_CLIENT_V_START ""
        RequestHeader set SSL_CLIENT_V_END ""
        RequestHeader set SSL_CLIENT_M_VERSION ""
        RequestHeader set SSL_CLIENT_M_SERIAL ""
        RequestHeader set SSL_CLIENT_CERT ""
        RequestHeader set SSL_CLIENT_VERIFY ""
        RequestHeader set SSL_SERVER_M_VERSION ""
        RequestHeader set SSL_SERVER_I_DN ""
        RequestHeader set SSL_SERVER_CERT ""

        RequestHeader set SSL_CLIENT_S_DN "%{SSL_CLIENT_S_DN}s"
        RequestHeader set SSL_CLIENT_I_DN "%{SSL_CLIENT_I_DN}s"
        RequestHeader set SSL_SERVER_S_DN_OU "%{SSL_SERVER_S_DN_OU}s"
        RequestHeader set SSL_CLIENT_VERIFY "%{SSL_CLIENT_VERIFY}s"
        RequestHeader set SSL_CLIENT_V_START "%{SSL_CLIENT_V_START}s"
        RequestHeader set SSL_CLIENT_V_END "%{SSL_CLIENT_V_END}s"
        RequestHeader set SSL_CLIENT_M_VERSION "%{SSL_CLIENT_M_VERSION}s"
        RequestHeader set SSL_CLIENT_M_SERIAL "%{SSL_CLIENT_M_SERIAL}s"
        RequestHeader set SSL_CLIENT_CERT "%{SSL_CLIENT_CERT}s"
        RequestHeader set SSL_CLIENT_VERIFY "%{SSL_CLIENT_VERIFY}s"
        RequestHeader set SSL_SERVER_M_VERSION "%{SSL_SERVER_M_VERSION}s"
        RequestHeader set SSL_SERVER_I_DN "%{SSL_SERVER_I_DN}s"
        RequestHeader set SSL_SERVER_CERT "%{SSL_SERVER_CERT}s"
        {% endif %}

        {% if app.get_headers('in') %}##### Security: Incoming headers only ! #####
        {{ app.get_headers('in') }}##### End of Incoming headers #####{% endif %}
        {% if first %}</If>{% else %}</ElseIf>{% endif %}
        {% set first = False %}
        {% endif %}
        {% endfor %}
    </Proxy>

    <Directory "/home/vlt-sys/Engine/conf/acme-challenge/">
        Require all granted
        Options None +FollowSymLinks
        AllowOverride None
        ForceType text/plain
    </Directory>

    <Directory /home/vlt-sys/>
        Require all denied
    </Directory>

    {% set ssl_load = false %}{% set h2_load = false %}{% set rpc_load = false %}

    {# IMPORTANT: Location directives must be sorted in public_dir ascending order #}
    {% for app in apps|reverse %}
    {% if app.public_dir == "vulture-status" %}
    <Location /vulture-status>
        ProxyPass !
        SetHandler server-status
        Require env local
        Require env supervision
    </Location>
    {% elif app.public_dir == "vulture-balancer-status" and conf.server_module_proxybalancer %}
    <Location "/vulture-balancer-status">
        ProxyPass !
        SetHandler balancer-manager
        Require env local
        Require env supervision
    </Location>
    {% elif app.public_dir != "vulture-balancer-status" %} #### DIRECTIVES FOR APPLICATION "{{app.name}}"####
    {% if app.type=="balanced" %}{{ app.proxy_balancer_hcexpr }}{% endif %}
    {% if app.public_alias %}
    ServerAlias {% for alias_item in app.public_alias.split(',') %}{{alias_item.strip()}} {% endfor %}
    {% endif %}
    CustomLog "{{app.access_logpath}}" LogFormat_{{app.log_custom.id}}  env=app_{{ app.id }}
    <Location {{ app.public_dir }}>

        LogLevel {{app.log_level}}

        {% if app.ssl_profile %}
        ### SSL CONF ###
        {% if app.ssl_profile.ssl_options_app %}{{ app.ssl_profile.ssl_options_app }} {% endif %}
        {% if app.ssl_profile.verifyclient != "none" and app.ssl_profile.redirect_no_cert %}SSLOptions +StdEnvVars
        RewriteCond %{SSL:SSL_CLIENT_VERIFY} !^SUCCESS$
        RewriteRule .* {{app.ssl_profile.redirect_no_cert}} [L]{% endif %}
        {% if app.ssl_profile.verifyclient != "none" %}SSLVerifyClient {{ app.ssl_profile.verifyclient }}{% endif %}
        {% endif %}
        {% if app.rules %}##### Application content rewriting rules #####
        {% for rule in app.rules %}{{rule}}{% endfor %}        ##### End of Application content rewriting rules #####
        {% endif %}
        {% if app.geoip %}{% if app.allow_geoip or app.block_geoip %}
        {% if app.allow_geoip %}SetEnvIf COUNTRY_CODE ^({{app.allow_geoip}}) AllowCountry{% endif %}
        {% if app.block_geoip %}SetEnvIf COUNTRY_CODE ^({{app.block_geoip}}) DenyCountry{% endif %}
        {% endif %}{% endif %}
        {% if app.reputation and app.reputation_tags_pipe %} # Reputation performing
        SetEnvIf REPUTATION0 ^({{ app.reputation_tags_pipe }}) BadReputation
        SetEnvIf REPUTATION1 ^({{ app.reputation_tags_pipe }}) BadReputation
        SetEnvIf REPUTATION2 ^({{ app.reputation_tags_pipe }}) BadReputation
        SetEnvIf REPUTATION3 ^({{ app.reputation_tags_pipe }}) BadReputation
        SetEnvIf REPUTATION4 ^({{ app.reputation_tags_pipe }}) BadReputation
        {% endif %}
        <RequireAny>
            <RequireAll>
                Require all granted
                {% if app.geoip and app.allow_geoip %}Require env AllowCountry{% else %}# No geoip whitelist{% endif %}
                {% if app.geoip and app.block_geoip %}Require not env DenyCountry{% else %}# No geoip blacklist{% endif %}
                Require not env BadReputation
                {% if app.access_mode %}{% for access in app.access_mode if access.getConf() %}
                ##### Network Access Control '{{ access.name }}' #####
                <RequireAny>
                    {{ access.getConf() }}
                </RequireAny>{% endfor %}{% else %}##### Network Access Control is disabled #####{% endif %}
            </RequireAll>
            {%- if app.whitelist_ips %}
            <RequireAll>
                Require all granted
                Require ip {{ app.whitelist_ips }}
            </RequireAll>{% endif %}
        </RequireAny>

        {% if app.rewriting %}##### Application URL rewriting rules #####
        {% for rule in app.rewriting %}{{rule}}
        {% endfor %}{% endif %}
        {% if app.headers_tpl_in %}##### Incoming headers management #####
        {{ app.headers_tpl_in }}    ##### End of Incoming headers management #####{% endif %}
        {% if app.forward_x509_fields %}
        RequestHeader set SSL_CLIENT_S_DN ""
        RequestHeader set SSL_CLIENT_I_DN ""
        RequestHeader set SSL_SERVER_S_DN_OU ""
        RequestHeader set SSL_CLIENT_VERIFY ""
        RequestHeader set SSL_CLIENT_V_START ""
        RequestHeader set SSL_CLIENT_V_END ""
        RequestHeader set SSL_CLIENT_M_VERSION ""
        RequestHeader set SSL_CLIENT_M_SERIAL ""
        RequestHeader set SSL_CLIENT_CERT ""
        RequestHeader set SSL_CLIENT_VERIFY ""
        RequestHeader set SSL_SERVER_M_VERSION ""
        RequestHeader set SSL_SERVER_I_DN ""
        RequestHeader set SSL_SERVER_CERT ""

        RequestHeader set SSL_CLIENT_S_DN "%{SSL_CLIENT_S_DN}s"
        RequestHeader set SSL_CLIENT_I_DN "%{SSL_CLIENT_I_DN}s"
        RequestHeader set SSL_SERVER_S_DN_OU "%{SSL_SERVER_S_DN_OU}s"
        RequestHeader set SSL_CLIENT_VERIFY "%{SSL_CLIENT_VERIFY}s"
        RequestHeader set SSL_CLIENT_V_START "%{SSL_CLIENT_V_START}s"
        RequestHeader set SSL_CLIENT_V_END "%{SSL_CLIENT_V_END}s"
        RequestHeader set SSL_CLIENT_M_VERSION "%{SSL_CLIENT_M_VERSION}s"
        RequestHeader set SSL_CLIENT_M_SERIAL "%{SSL_CLIENT_M_SERIAL}s"
        RequestHeader set SSL_CLIENT_CERT "%{SSL_CLIENT_CERT}s"
        RequestHeader set SSL_CLIENT_VERIFY "%{SSL_CLIENT_VERIFY}s"
        RequestHeader set SSL_SERVER_M_VERSION "%{SSL_SERVER_M_VERSION}s"
        RequestHeader set SSL_SERVER_I_DN "%{SSL_SERVER_I_DN}s"
        RequestHeader set SSL_SERVER_CERT "%{SSL_SERVER_CERT}s"
        {% endif %}
        {% if app.headers_tpl_out %}##### Outgoing headers management #####
        {{ app.headers_tpl_out }}    ##### End of Outgoing headers management #####{% endif %}

        ProxyAddHeaders{% if app.proxy_add_header %} On {% else %} Off {% endif %}

        RewriteCond %{REQUEST_METHOD} !^({{ app.get_methods(1) }})$
        RewriteRule .* - [R=405,L]

        {% if app.override_error %}#### Override backend's error messages ####
        ProxyErrorOverride On
        ErrorDocument 403 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_403.html
        ErrorDocument 404 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_404.html
        ErrorDocument 405 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_405.html
        ErrorDocument 406 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_406.html
        ErrorDocument 500 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_500.html
        ErrorDocument 501 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_501.html
        ErrorDocument 502 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_502.html
        ErrorDocument 503 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_503.html
        ErrorDocument 504 /{{ conf.server_public_token }}/templates/portal_{{app.template.id}}_html_error_504.html
        {% endif %}

        {% if app.rewrite_cookie_path and app.private_uri_path != app.public_dir %}ProxyPassReverseCookiePath "{{app.private_uri_path}}" "{{app.public_dir}}"{% endif %}
        ProxyPassReverseCookieDomain  "{{app.private_uri_fqdn}}" "{{app.public_name}}"
        ProxyPassReverse "{{app.private_uri}}"
        {#ProxyHTMLEnable On
        #ProxyHTMLURLMap "{{app.private_uri_fqdn}}" "{{app.public_name}}"
        #Remember: This needs to be 'On' if we want to set or rewrite it later#}
        {% if app.preserve_host %}ProxyPreserveHost On{% else %}ProxyPreserveHost Off{% endif %}

        {% if app.custom_location %}
        {{ app.custom_location }}
        {% endif %}
    </Location>
    {% endif %}
    {% endfor %}

    #### SHARED DIRECTIVES FOR ALL APPS ####
    {% for app in apps %}
    {% if app.public_dir not in ["vulture-status", "vulture-balancer-status"] %}
    {% if app.enable_h2 and not h2_load %}Protocols h2c h2 http/1.1{% set h2_load = true %}{%endif%}
    {% if not rpc_load %}{% if app.enable_rpc %}OutlookAnywherePassthrough On {% set rpc_load = true %}{% elif conf.server_module_rpc%}OutlookAnywherePassthrough Off{% set rpc_load = true %}{% endif %}{% endif %}

    {% if app.ssl_profile and not ssl_load %}##### SSL configuration based on the SSL profile "{{app.ssl_profile.name}}" #####
    {% set ssl_load = true %}
    SSLEngine on
    SSLProtocol -ALL {{app.ssl_profile.protocols}}
    SSLCipherSuite {{app.ssl_profile.ciphers}}
    SSLUseStapling {% if app.ssl_profile.enable_ocsp_stapling %}On{% else %}Off{% endif %}

    {% if app.ssl_profile.pkp %}Header set Public-Key-Pins "pin-sha256=\"{{app.ssl_profile.pkp}}\"{% if app.ssl_profile.hpkp_other%};{{app.ssl_profile.hpkp_other|replace('"', '\\\"')}}{% endif %}"{% endif %}

    {% if app.ssl_profile.honorcipherorder %}SSLHonorCipherOrder on{% else %}SSLHonorCipherOrder off{% endif %}
    {% if app.ssl_profile.ssl_options_vhost %}{{ app.ssl_profile.ssl_options_vhost }}{% endif %}
    #SHA256Sum of this file should be: {{app.ssl_profile.SHA256sum_cert}}
    SSLCertificateFile conf/SSLCertificateFile-{{app.ssl_profile.id}}.txt
    #SHA256Sum of this file should be: {{app.ssl_profile.SHA256sum_key}}
    SSLCertificateKeyFile conf/SSLCertificateKeyFile-{{app.ssl_profile.id}}.txt
    {% if app.ssl_profile.SHA256sum_crl %}SSLCARevocationCheck {{app.ssl_profile.verify_crl}}
    #SHA256Sum of this file should be: {{app.ssl_profile.SHA256sum_crl}}
    SSLCARevocationFile conf/SSLCARevocationFile-{{app.ssl_profile.id}}.crl{% endif %}
    {% if app.ssl_profile.SHA256sum_accepted_ca %}#SHA256Sum of this file should be: {{app.ssl_profile.SHA256sum_accepted_ca}}
    SSLCACertificateFile conf/SSLCACertificateFile-{{app.ssl_profile.id}}.txt{% endif%}

    {% if app.ssl_profile.ocsp_responder_enable%}SSLOCSPEnable On
    {% if app.ssl_profile.ocsp_responder_default%}SSLOCSPDefaultResponder {{ app.ssl_profile.ocsp_responder_default }}{% endif %}
    {% if app.ssl_profile.ocsp_responder_override%}SSLOCSPOverrideResponder on {% else %}   SSLOCSPOverrideResponder off{% endif %}
    {% if app.ssl_profile.ocsp_responder_timeout%}SSLOCSPResponderTimeout {{ app.ssl_profile.ocsp_responder_timeout }}{% endif %}
    {%else%}SSLOCSPEnable Off    {% endif %}
    {% endif %}
    {% endif %}
    {% endfor %}
    ##### End of SHARED DIRECTIVES #####

    {% include "vulture_application.conf" %}

##### End of Configuration for public FQDN "{{public_name}}" #####
</VirtualHost>
{% endfor %}
