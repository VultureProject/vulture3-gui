#!/bin/sh

/bin/echo "#!/bin/sh
# PROVIDE: vulture
# KEYWORD: shutdown
# REQUIRE: mongod
#This file is part of Vulture 3.
#
#Vulture 3 is free software: you can redistribute it and/or modify
#it under the terms of the GNU General Public License as published by
#the Free Software Foundation, either version 3 of the License, or
#(at your option) any later version.

#Vulture 3 is distributed in the hope that it will be useful,
#but WITHOUT ANY WARRANTY; without even the implied warranty of
#MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#GNU General Public License for more details.

#You should have received a copy of the GNU General Public License
#along with Vulture 3.  If not, see http://www.gnu.org/licenses/.

########################## WARNING ###############################
# Don't edit this file, it is automatically generated by Vulture #
########################## WARNING ###############################

. /etc/rc.subr

name='vulture'
rcvar=\${name}_enable
vulture_enable=${vulture_enable-'YES'}

command='/usr/sbin/\${name}'
start_cmd='vulture_start'
stop_cmd='vulture_stop'
reload_cmd='vulture_reload'
extra_commands='reload'

load_rc_config $name

vulture_start()
{
    if checkyesno \${rcvar}; then
    {
        if [ ! -f /var/bootstrap/.first_start ]; then
        {
            echo 'Starting Vulture Services'
            LD_LIBRARY_PATH=/usr/local/lib/gcc48/ /home/vlt-sys/Engine/bin/httpd -f /home/vlt-sys/Engine/conf/gui-httpd.conf -k start 2> /dev/null
            /home/vlt-sys/Engine/bin/httpd -f /home/vlt-sys/Engine/conf/portal-httpd.conf -k start 2> /dev/null
            /home/vlt-sys/scripts/vulture_apps_starter start 2> /dev/null
        }
        fi
    }
    fi
}
vulture_stop()
{
    if checkyesno \${rcvar}; then
    {
	    echo 'Stopping Vulture Services'
 	    /home/vlt-sys/scripts/vulture_apps_starter stop 2> /dev/null
	    LD_LIBRARY_PATH=/usr/local/lib/gcc48/ /home/vlt-sys/Engine/bin/httpd -f /home/vlt-sys/Engine/conf/gui-httpd.conf -k stop 2> /dev/null
	    /home/vlt-sys/Engine/bin/httpd -f /home/vlt-sys/Engine/conf/portal-httpd.conf -k stop 2> /dev/null
	    sleep 2
    }
    fi
}
vulture_reload()
{
    if checkyesno \${rcvar}; then
    {
        echo 'Reloading Vulture Services'
        /home/vlt-sys/scripts/vulture_apps_starter reload 2> /dev/null
        LD_LIBRARY_PATH=/usr/local/lib/gcc48/ /home/vlt-sys/Engine/bin/httpd -f /home/vlt-sys/Engine/conf/gui-httpd.conf -k graceful 2> /dev/null
        /home/vlt-sys/Engine/bin/httpd -f /home/vlt-sys/Engine/conf/portal-httpd.conf -k graceful 2> /dev/null
    }
    fi
}


run_rc_command \"\$1\"" > /usr/local/etc/rc.d/vulture
/bin/chmod 755 /usr/local/etc/rc.d/vulture
/bin/rm /etc/rc.d/vulture 2> /dev/null


/bin/echo '#!/usr/bin/env /home/vlt-gui/env/bin/python2.7
# -*- coding: utf-8 -*-
"""This file is part of Vulture 3.

Vulture 3 is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Vulture 3 is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Vulture 3.  If not, see http://www.gnu.org/licenses/.
"""
__author__ = "Florian Hagniel"
__credits__ = []
__license__ = "GPLv3"
__version__ = "3.0.0"
__maintainer__ = "Vulture Project"
__email__ = "contact@vultureproject.org"
__doc__ = ""

import sys
import os
import time

# Django setup part
sys.path.append("/home/vlt-gui/vulture/")
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "vulture.settings")


# Check initial call
if len(sys.argv) != 2:
    sys.exit(1)
else:
    cmd = sys.argv[1]

import django
django.setup()

from gui.models.system_settings import Cluster


def start_applications(node):
    done = []
    for listen_address in node.get_listen_addresses():
        token = node.name + listen_address.address.ip + str(listen_address.port)
        if token not in done:
            status = listen_address.start()
            done.append(token)
            if status == True:
                print "Listener {}:{} successfully started".format(listen_address.address.ip, listen_address.port)
            else:
                print "Unable to start listener {}:{}, errors: {}".format(listen_address.address.ip, listen_address.port, status)

def stop_applications(node):
    done = []
    for listen_address in node.get_listen_addresses():
        token = node.name + listen_address.address.ip + str(listen_address.port)
        if token not in done:
            status = listen_address.stop()
            done.append(token)
            if status == True:
                print "Listener {}:{} successfully stopped".format(listen_address.address.ip, listen_address.port)
            else:
                print "Unable to stop listener {}:{}, errors: {}".format(listen_address.address.ip, listen_address.port, status)


def reload_applications(node):
    done = []
    for listen_address in node.get_listen_addresses():
        token = node.name + listen_address.address.ip + str(listen_address.port)
        if token not in done:
            done.append(token)
            status = listen_address.graceful()
            if status == True:
                print "Listener {}:{} successfully reload".format(listen_address.address.ip, listen_address.port)
            else:
                print "Uneable to graceful listener {}:{}, errors: {}".format(listen_address.address.ip, listen_address.port, status)


cluster = Cluster.objects.get()
node = cluster.get_current_node()

timeout = time.time() + 60
while True:
    time.sleep(1)
    if node.is_up():
        if cmd == "start":
            start_applications(node)
            sys.exit(0)
        elif cmd == "stop":
            stop_applications(node)
            sys.exit(0)
        elif cmd == "restart":
            stop_applications(node)
            start_applications(node)
            sys.exit(0)
        elif cmd == "reload":
            reload_applications(node)
            sys.exit(0)
        else:
            print "{} : Unknown command".format(cmd)
            sys.exit(2)
    elif time.time() > timeout:
        print "Unable to start Vulture apps"
        sys.exit(3)
' > /home/vlt-sys/scripts/vulture_apps_starter

/usr/sbin/chown vlt-gui:vlt-web /var/log/Vulture/redis_events.log