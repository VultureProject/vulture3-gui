+++ /home/vlt-gui/env/lib/python2.7/site-packages/pyrad/dictionary.py	2017-03-29 06:36:49.453445000 +0200
@@ -56,6 +56,8 @@
 | ether         | 6 octets of hh:hh:hh:hh:hh:hh                |
 |               | where 'h' is hex digits, upper or lowercase. |
 +---------------+----------------------------------------------+
+| tlv           | Nested tag-length-value                      |
++---------------+----------------------------------------------+
 """
 from pyrad import bidict
 from pyrad import tools
@@ -68,7 +70,7 @@
 
 DATATYPES = frozenset(['string', 'ipaddr', 'integer', 'date', 'octets',
                        'abinary', 'ipv6addr', 'ipv6prefix', 'short', 'byte',
-                       'signed', 'ifid', 'ether'])
+                       'signed', 'ifid', 'ether', 'tlv', 'combo-ip'])
 
 
 class ParseError(Exception):
@@ -102,7 +104,7 @@
 
 class Attribute(object):
     def __init__(self, name, code, datatype, vendor='', values={},
-                 encrypt=0, has_tag=False):
+                 encrypt=0, has_tag=False, has_array=False):
         if datatype not in DATATYPES:
             raise ValueError('Invalid data type')
         self.name = name
@@ -111,6 +113,7 @@
         self.vendor = vendor
         self.encrypt = encrypt
         self.has_tag = has_tag
+        self.has_array = has_array
         self.values = bidict.BiDict()
         for (key, value) in values.items():
             self.values.Add(key, value)
@@ -168,6 +171,7 @@
 
         vendor = state['vendor']
         has_tag = False
+        has_array = False
         encrypt = 0
         if len(tokens) >= 5:
             def keyval(o):
@@ -180,6 +184,8 @@
             for (key, val) in options:
                 if key == 'has_tag':
                     has_tag = True
+                elif key == 'array':
+                    has_array = True
                 elif key == 'encrypt':
                     if val not in ['1', '2', '3']:
                         raise ParseError(
@@ -188,7 +194,7 @@
                                 line=state['line'])
                     encrypt = int(val)
 
-            if (not has_tag) and encrypt == 0:
+            if (not has_tag) and (not has_array) and encrypt == 0:
                 vendor = tokens[4]
                 if not self.vendors.HasForward(vendor):
                     if vendor == "concat":
@@ -219,7 +225,7 @@
             key = code
 
         self.attrindex.Add(attribute, key)
-        self.attributes[attribute] = Attribute(attribute, code, datatype, vendor, encrypt=encrypt, has_tag=has_tag)
+        self.attributes[attribute] = Attribute(attribute, code, datatype, vendor, encrypt=encrypt, has_tag=has_tag, has_array=has_array)
 
     def __ParseValue(self, state, tokens, defer):
         if len(tokens) != 4:
@@ -268,7 +274,8 @@
                         file=state['file'],
                         line=state['line'])
             except ValueError:
-                raise ParseError(
+                if fmt[1] != '1,1,c':
+                    raise ParseError(
                         'Syntax error in vendor specification',
                         file=state['file'],
                         line=state['line'])
